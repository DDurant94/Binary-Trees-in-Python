About:
  In this program, I have laid out a binary tree data structure that uses recursive functions to place data within the tree. This program aims 
  to visualize how a binary tree data structure works at its fundamental level. To achieve this, I have implemented several endpoints to 
  understand how it works: in-order traversal, pre-order traversal, post-order traversal, and general traversal.

  -In-order traversal starts with the left side of the tree, going all the way down to the lowest child, placing that node first, then its 
  parent’s right node and its children, if any. After that, it works its way up to the root and repeats down the right side of the tree.

  -Pre-order traversal places the root node first, then adds each node in ascending order.

  -Post-order traversal starts with the smallest node, working its way up, and finally adds the root node to the list.

  -Traversal allows you to see the structure of the tree, with each node printed in relation to its parents and children.

  Binary trees, with their hierarchical structure, are great for many different programs where organization is paramount. Their ability to 
  traverse from the top down based on value allows for swift retrieval and deletion of elements while simultaneously keeping the structure 
  balanced.
  
  Time Complexity:
    O(n log n)

Questions:

  Tree Traversal Practice

  Objective:
  The objective of this assignment is to practice implementing and understanding different tree traversal algorithms.

  Problem Statement: 
    You are provided with a binary tree data structure. Your task is to implement various traversal algorithms recursively and analyze their 
    traversal order and output.

                    50
            ┌─────┴─────┐
            30           70
      ┌────┴────┐    ┌────┴────┐
      20       40   60         80

  Task 1
    Implement the in-order traversal algorithm for the given binary tree.

  Task 2
    Implement the pre-order traversal algorithm for the given binary tree.

  Task 3
    Implement the post-order traversal algorithm for the given binary tree.

  task 4
    Test the implemented traversal algorithms on a binary tree and observe the traversal order and output.

  Expected Outcomes:
  Successful implementation of in-order, pre-order, and post-order traversal algorithms.
  Understanding of the traversal order and output for each algorithm.
  Practice in analyzing and comparing different traversal techniques.

  NOTE: 
    Ensure that all code in your file is ready to run. This means that if someone opens your file and clicks the run button at the top, all 
    code executes as intended. For example, if there are if statements, print statements, or for loops, they should function correctly and 
    display output in the console as expected. If you have a function, make sure the function is called and runs. If there are classes/objects, 
    make sure they are instantiated and the methods are called.